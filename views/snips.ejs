/*
        db.find({
            selector: {
                payer_name: (!req.query.payername) ? 'Tom Murphy' : req.query.payername
            }
        }, function (er, result) {
            if (er) {
                throw er;
            }

            console.log('Found %d documents', result.docs.length);
            for (var i = 0; i < result.docs.length; i++) {
                //console.log('  Doc id: %s', result.docs[i]._id);

                res.render('auto', {
                    title: 'Auto Policy',
                    page: 'auto',
                    memberData: result.docs[i]
                });
            }
        });
        */



            <ul class="insuranceLeftList">
              <!--
              <li>Car Policy Number: <span><%= memberData.CarI.plan_id %></span></li>
              <li>Car Policy Start Date: <span><%= memberData.CarI.eligibility[0].eligibility_dates.start %></span></li>
              <li>Car Policy Renewal Date: <span><%= memberData.CarI.eligibility[0].eligibility_dates.end %></span></li>
              <li>Policy Duration: <span><%= memberData.CarI.eligibility[0].period_in_months %></span> months</li>
              <li>Cover Type: <span><%= memberData.CarI.eligibility[0].ptype %></span></li>

              <li>No Claim Bo Discount: <span><%=memberData.CarI.eligibility[0].NoClaimBoDiscount[4] %></span> </li>
              <li>Fire & Theft Protection: <span><%=memberData.CarI.eligibility[0].FireTheft[1]  %></span> </li>
              <li>Step back bonus protection: <span><%=memberData.CarI.eligibility[0].CarReplacement[0]  %></span> </li>
              <li>New Car replacement: <span><%=memberData.CarI.eligibility[0].CarReplacement[1]  %></span> </li>
              <li>Windscreen Cover <span><%=memberData.CarI.eligibility[0].Windscreen[1]  %></span></li>
              <li>Replacement locks up to: <span><%=memberData.CarI.eligibility[0].ReplacementLocks[1]  %></span></li>
              <li>Outstanding Balance: <span><%=memberData.CarI.eligibility[0].OutstandingBalance  %></span> </li>
            -->
            <li>Car Policy Number: <span>Coming soon!</span></li>















                                            <div class="homeInsurance">

                                                <div class="insuranceTypeHeading">Home Insurance</div>

                                                <div class="insuranceLeftList">
                                                    <ul class="ui-insuranceLeftList">
                                                        <li>Home Policy Number: <span><%= memberData.HomeI.plan_id %></span></li>
                                                        <li>Home Policy Start Date: <span><%= memberData.HomeI.created_date %></span></li>
                                                        <li>Home Policy Renewal Date: <span><%= memberData.HomeI.renewal_date %></span></li>
                                                        <li>Policy Duration: <span><%= memberData.HomeI.period_in_months %> months</span></li>
                                                    </ul>

                                                    <div class="benefits">
                                                        <h3><span>Benefits</span></h3>
                                                        <p>
                                                            <span class="benefits-heading">
                                <%=memberData.HomeI.eligibility[0].accidental %>
                              </span>
                                                            <br>
                                                            <%=memberData.HomeI.eligibility[0].accidental_description %>
                                                        </p>

                                                        <p>
                                                            <span class="benefits-heading">
                                <%=memberData.HomeI.eligibility[0].bicycle %>
                              </span>
                                                            <br>
                                                            <%=memberData.HomeI.eligibility[0].bicycle_description %>
                                                        </p>

                                                        <p>
                                                            <span class="benefits-heading">
                                <%=memberData.HomeI.eligibility[0].theft %>
                              </span>
                                                            <br>
                                                            <%=memberData.HomeI.eligibility[0].theft_description %>
                                                        </p>

                                                        <p>
                                                            <span class="benefits-heading">
                                <%=memberData.HomeI.eligibility[0].mortgage %>
                              </span>
                                                            <br>
                                                            <%=memberData.HomeI.eligibility[0].mortgage_description %>
                                                        </p>

                                                    </div>


                                                </div>


                                                <ul class="insuranceRightList">
                                                    <li><a href="#">How to make a claim</a></li>
                                                    <li><a href="#">Add other benefits</a></li>
                                                    <li><a href="#">View policy document</a></li>
                                                </ul>

                                            </div>








                                                                                  <b>COVER:</b> <%=memberData.policies[0].categories[0].category %>
                                                                                  </span><br>
                                                                                  <%=memberData.policies[0].categories[0].description %><br><br>
                                                                                  <b>TEST: </b> <%=memberData.policies[0].categories[0].coverage[0].item %><br>
                                                                                  <b>LIMIT: </b> <%=memberData.policies[0].categories[0].coverage[0].limit %><br>
                                                                                  <b>COVER BEGIN: </b> <%=memberData.policies[0].categories[0].coverage[0].begin %><br>
                                                                                  <b>PERCENTAGE: </b> <%=memberData.policies[0].categories[0].coverage[0].percentage %><br>
                                                                                  <b>No. Of Claims: </b> <%= memberData.policies[0].categories[0].coverage[0].claims.length %><br>

                                                                                  <%
                                                                                  var CClaims = memberData.policies[0].categories[0].coverage[0].claims;
                                                                                  var i;
                                                                                  if(CClaims.length > 0)
                                                                                  {
                                                                                    for(i=0; i<CClaims.length; i++)
                                                                                    {
                                                                                        %>
                                                                                        <b>CLAIM DATE: </b> <%= CClaims[i].date %><br>
                                                                                        <b>CLAIM AMOUNT: </b> <%= CClaims[i].amount %><br><br>
                                                                                        <%
                                                                                    }
                                                                                  }else
                                                                                  {%>
                                                                                    <b>NO claims recored found</b>
                                                                                  <%}
                                                                                  %>


                                                                                  <b>TEST: </b> <%=memberData.policies[0].categories[0].coverage[1].item %><br>
                                                                                  <b>LIMIT: </b> <%=memberData.policies[0].categories[0].coverage[1].limit %><br>
                                                                                  <b>COVER BEGIN: </b> <%=memberData.policies[0].categories[0].coverage[1].begin %><br>
                                                                                  <b>PERCENTAGE: </b> <%=memberData.policies[0].categories[0].coverage[1].percentage %><br>
                                                                                  <b>NO. OF CLAIMS: </b> <%= memberData.policies[0].categories[0].coverage[1].claims[0] %><br>





                                                              <br><br><br><br><br><br>

                                                              <span class="benefits-heading">
                                                              <b>COVER:</b> <%=memberData.policies[0].categories[1].category %>
                                                              </span><br>
                                                              <%=memberData.policies[0].categories[1].description %><br><br>
                                                              <b>TEST: </b> <%=memberData.policies[0].categories[1].coverage[0].item %><br>
                                                              <b>LIMIT: </b> <%=memberData.policies[0].categories[1].coverage[0].limit %><br>
                                                              <b>COVER BEGIN: </b> <%=memberData.policies[0].categories[1].coverage[0].begin %><br>
                                                              <b>PERCENTAGE: </b> <%=memberData.policies[0].categories[1].coverage[0].percentage %><br>
                                                              <b>NO. OF CLAIMS: </b> <%= memberData.policies[0].categories[1].coverage[0].claims[0] %><br>





                                                              if(CClaims.length > 0)
                                                              {
                                                                for(ci=0; ci<CClaims.length; ci++)
                                                                {
                                                                    %>
                                                                    <b>CLAIM DATE: </b> <%= CClaims[ci].date %><br>
                                                                    <b>CLAIM AMOUNT: </b> <%= CClaims[ci].amount %><br><br>
                                                                    <%
                                                                }
                                                              }else
                                                              {%>
                                                                <b>NO claims recored found</b>
                                                              <%}










                                                              {
                                                                 "_id":"877491299045719",
                                                                 "_rev":"5-4aa61898145352441ddf3ea8569728d5",
                                                                 "name":"Twana Daniel",
                                                                 "id":"877491299045719",
                                                                 "birthday":"",
                                                                 "gender":"",
                                                                 "address":{
                                                                    "number":"",
                                                                    "street":"",
                                                                    "state":"",
                                                                    "country":"",
                                                                    "postcode":""
                                                                 },
                                                                 "created_at":"2014-05-12 - 03:15:10",
                                                                 "policy_renewal_date":"2017-05-11",
                                                                 "logins":[

                                                                 ],
                                                                 "policies":[
                                                                    {
                                                                       "policy":"health",
                                                                       "categories":[
                                                                          {
                                                                             "category":"Vision",
                                                                             "description":"Reading Glasses comes under general policy",
                                                                             "symbol":"",
                                                                             "coverage":[
                                                                                {
                                                                                   "item":"Eye Test",
                                                                                   "limit":100,
                                                                                   "available":0,
                                                                                   "window":2,
                                                                                   "instances":1,
                                                                                   "begin":"2016-01-01",
                                                                                   "percentage":80,
                                                                                   "claims":[
                                                                                      {
                                                                                         "date":"2016-05-17",
                                                                                         "amount":80
                                                                                      }
                                                                                   ]
                                                                                },
                                                                                {
                                                                                   "item":"Eye Wear",
                                                                                   "limit":300,
                                                                                   "available":30,
                                                                                   "window":2,
                                                                                   "instances":"limit",
                                                                                   "begin":"2016-01-01",
                                                                                   "percentage":80,
                                                                                   "claims":[
                                                                                      {
                                                                                         "date":"2016-05-17",
                                                                                         "amount":337.5
                                                                                      }
                                                                                   ]
                                                                                }
                                                                             ]
                                                                          },
                                                                          {
                                                                             "category":"Dental",
                                                                             "description":"Members can access orthodontic benefits as well as an enhanced range of dental benefits.",
                                                                             "symbol":"",
                                                                             "coverage":[
                                                                                {
                                                                                   "item":"Cleaning",
                                                                                   "limit":"unlimited",
                                                                                   "window":1,
                                                                                   "instances":6,
                                                                                   "begin":"2016-01-01",
                                                                                   "percentage":90,
                                                                                   "claims":[

                                                                                   ]
                                                                                },
                                                                                {
                                                                                   "item":"Orthodontics",
                                                                                   "limit":3000,
                                                                                   "window":"lifetime",
                                                                                   "instances":"limit",
                                                                                   "begin":"2016-01-01",
                                                                                   "percentage":80,
                                                                                   "claims":[

                                                                                   ]
                                                                                },
                                                                                {
                                                                                   "item":"X-Ray",
                                                                                   "limit":"unlimited",
                                                                                   "window":1,
                                                                                   "instances":1,
                                                                                   "begin":"2016-01-01",
                                                                                   "percentage":90,
                                                                                   "claims":[

                                                                                   ]
                                                                                }
                                                                             ]
                                                                          }
                                                                       ]
                                                                    }
                                                                 ]
                                                              }























                                                              {
  "_id": "877491299045719",
  "_rev": "5-4aa61898145352441ddf3ea8569728d5",
  "name": "Twana Daniel",
  "id": "877491299045719",
  "birthday": "",
  "gender": "",
  "address": {
    "number": "",
    "street": "",
    "state": "",
    "country": "",
    "postcode": ""
  },
  "created_at": "2014-05-12 - 03:15:10",
  "policy_renewal_date": "2017-05-11",
  "logins": [],
  "policies": [
    {
      "policy": "health",
      "categories": [
        {
          "category": "Vision",
          "description": "Reading Glasses comes under general policy",
          "symbol": "",
          "coverage": [
            {
              "item": "Eye Test",
              "limit": 100,
              "available": 0,
              "window": 2,
              "instances": 1,
              "begin": "2016-01-01",
              "percentage": 80,
              "claims": [
                {
                  "date": "2016-05-17",
                  "amount": 80
                }
              ]
            },
            {
              "item": "Eye Wear",
              "limit": 300,
              "available": 30,
              "window": 2,
              "instances": "limit",
              "begin": "2016-01-01",
              "percentage": 80,
              "claims": [
                {
                  "date": "2016-05-17",
                  "amount": 337.5
                }
              ]
            }
          ]
        },
        {
          "category": "Dental",
          "description": "Members can access orthodontic benefits as well as an enhanced range of dental benefits.",
          "symbol": "",
          "coverage": [
            {
              "item": "Cleaning",
              "limit": "unlimited",
              "window": 1,
              "instances": 6,
              "begin": "2016-01-01",
              "percentage": 90,
              "claims": []
            },
            {
              "item": "Orthodontics",
              "limit": 3000,
              "window": "lifetime",
              "instances": "limit",
              "begin": "2016-01-01",
              "percentage": 80,
              "claims": []
            },
            {
              "item": "X-Ray",
              "limit": "unlimited",
              "window": 1,
              "instances": 1,
              "begin": "2016-01-01",
              "percentage": 90,
              "claims": []
            }
          ]
        }
      ]
    }
  ]
}



















// 14
if(CCoverage[i].claims.length > 0)
{
  for(ci=0; ci<CCoverage[i].claims.length; ci++)
  {
      %>
      <b>CLAIM DATE: </b> <%= CCoverage[i].claims[ci].date %><br>
      <b>CLAIM AMOUNT: </b> <%= CCoverage[i].claims[ci].amount %><br><br>
      <%
  }
}else
{%>
  <b>NO claims recored found</b>
<%}









if(CCoverage.length > 0)
{
  for(i=0; i<CCoverage.length; i++)
  {
      %>

      <span class="benefits-heading"><b>COVER:</b> <%=CCategories.category %></span><br>
      <%=CCategories.description %><br><br>
      <b>TEST: </b> <%=CCoverage[i].item %><br>
      <b>LIMIT: </b> <%=CCoverage[i].limit %><br>
      <b>COVER BEGIN: </b> <%=CCoverage[i].begin %><br>
      <b>PERCENTAGE: </b> <%=CCoverage[i].percentage %><br>
      <b>No. Of Claims: </b> <%= CCoverage[i].claims.length %><br>
      <%

        if(CCoverage[i].claims.length > 0)
        {
          for(ci=0; ci<CCoverage[i].claims.length; ci++)
          {
              %>
              <b>CLAIM DATE: </b> <%= CCoverage[i].claims[ci].date %><br>
              <b>CLAIM AMOUNT: </b> <%= CCoverage[i].claims[ci].amount %><br><br>
              <%
          }
        }else
        {%>
          <b>NO claims recored found</b>
        <%}

  }
}else
{%>
  <b>NO cover recored found</b>
<%}
%>









<%
  for(cov_i=0; cov_i<CCategories[cat_i].coverage.length; cov_i++)
  {
      %>
      <option name="type" value="<%=CCategories[cat_i].coverage[cov_i].item %>" > <%=CCategories[cat_i].coverage[cov_i].item %> </option>
      <%
  }
}
%><!-- Closing cover type loop -->



<script>
  function selectChanged(newvalue) {
    if(newvalue == 'vision'){
      </script>

        <option name="type" value="1" ><%= memberData.policies[0].categories[0].coverage %></option>

      <script>
    }else if (newvalue == 'dental') {


    }
  }
</script>




{
  "_id": "877491299045719",
  "_rev": "105-6c208f16e21d697001a3934ca5364581",
  "id": "877491299045719",
  "name": "Twana Daniel",
  "birthday": "01/08/19982",
  "gender": "Male",
  "address": "  123 Cloud Avenue..",
  "logins": [],
  "policies": [
    {
      "policy": "health",
      "createdat": "01/01/2017",
      "policyrenewal": "01/01/2018",
      "categories": [
        {
          "category": "vision",
          "symbol": "",
          "coverage": [
            {
              "item": "Eye Test",
              "limit": 100,
              "available": 0,
              "window": 2,
              "instances": 1,
              "begin": "2016-01-01",
              "percentage": 80,
              "claims": [
                {
                  "date": "2016-05-17",
                  "amount": "200"
                }
              ]
            },
            {
              "item": "Eye Wear",
              "limit": 300,
              "available": 30,
              "window": 2,
              "instances": "limit",
              "begin": "2016-01-01",
              "percentage": 80,
              "claims": [
                {
                  "date": "2016-05-17",
                  "amount": 337.5
                }
              ]
            }
          ]
        },
        {
          "category": "dental",
          "symbol": "",
          "coverage": [
            {
              "item": "Cleaning",
              "limit": "unlimited",
              "window": 1,
              "instances": 6,
              "begin": "2016-01-01",
              "percentage": 90,
              "claims": []
            },
            {
              "item": "Orthodontics",
              "limit": 3000,
              "window": "lifetime",
              "instances": "limit",
              "begin": "2016-01-01",
              "percentage": 80,
              "claims": []
            },
            {
              "item": "X-Ray",
              "limit": "unlimited",
              "window": 1,
              "instances": 1,
              "begin": "2016-01-01",
              "percentage": 90,
              "claims": []
            }
          ]
        }
      ]
    }
  ]
}







































































/*eslint-env node*/

//------------------------------------------------------------------------------
// node.js starter application for Bluemix
//------------------------------------------------------------------------------

var path = require('path');
//var routes = require('./routes/index');

// This application uses express as its web server
// for more info, see: http://expressjs.com
var express = require('express');

// cfenv provides access to your Cloud Foundry environment
// for more info, see: https://www.npmjs.com/package/cfenv
var cfenv = require('cfenv');

var log4js = require('log4js');

var logger = log4js.getLogger('application');

// create a new express server
var app = express();
var http = require('http');


var datetime = require('node-datetime');
var dt = datetime.create();
var fomratted = dt.format('d/m/Y H:M:S');


//bodyparser for POST requests.
var bodyParser = require('body-parser');
// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({
    extended: false
}));

// parse application/json
app.use(bodyParser.json());

var manager = require('./account');

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

// serve the files out of ./public as our main files
app.use(express.static(path.join(__dirname, 'public')));

// get the app environment from Cloud Foundry
var appEnv = cfenv.getAppEnv();

// start server on the specified port and binding host
app.listen(appEnv.port, '0.0.0.0', function () {



    //----------------------------------------------------------------------------------
    // Cloudant connections
    //----------------------------------------------------------------------------------

    //Added for Json Readability
    app.set('json spaces', 6);

    //Cloudant Initialization code
    //require('dotenv').load();
    // Load the Cloudant library.
    var Cloudant = require('cloudant');
    //using Bluemix VCAP_SERVICES for Cloudant credentials
    if (process.env.VCAP_SERVICES) {
        // Running on Bluemix. Parse the port and host that we've been assigned.
        var env = JSON.parse(process.env.VCAP_SERVICES);
        var host = process.env.VCAP_APP_HOST;
        var port = process.env.VCAP_APP_PORT;
        //        console.log('VCAP_SERVICES: %s', process.env.VCAP_SERVICES);
        // Also parse Cloudant settings.
        var credentials = env['cloudantNoSQLDB'][0]['credentials'];
        username = credentials.username;
        password = credentials.password;

        // Initialize the library with CloudCo account.
        cloudant = Cloudant({
            account: username,
            password: password
        });
    } else {
        console.log('Not using VCAP_SERVICES');
        // To run the app locally comment out above two lines and add your username and password from your Cloudant
        username = '55da74fd-85bf-471b-b9de-166ee82f54e2-bluemix';
        password = '5cd6aeb339576fe37cb8a718fbda65beaa6dfb1f0410bd1d9c29e6d483cf25cf';

        // Initialize the library with CloudCo account.
        var cloudant = Cloudant({
            account: username,
            password: password
        });
    }


    var db = cloudant.db.use("insurance"); //use Insurance DB

    cloudant.db.create("insurance", function (err, res) {
        if (err) {
            logger.warn('database already created');
        } else {
            logger.info('database created successfully');
        }
    });


    // print a message when the server starts listening
    logger.info("server starting on " + appEnv.url);
    //Home page
    app.get("/", function (req, res) {
        res.render('index', {
            title: 'Cloud Insurance Co - the one with the AI Bot',
            page: 'homePage',
        });
    });

    //About page
    app.get("/about", function (req, res) {
        res.render('about', {
            title: 'Cloud Insurance Co - About',
            page: 'homePage',
        });
    })

    //member page
    app.get("/member", function (req, res) {

        var name = req.query.name;
        var id = req.query.id;
        db.list(function (err, body) {

            if (err) {
                logger.error(err);
            } else {

                var rows = body.rows;
                var count = rows.length;
                var item;

                /* TODO: should be able to use a find method here */

                rows.forEach(function (account) {
                    db.get(account.id, {
                        revs_info: true
                    }, function (err, doc) {

                        if (doc.name === name && doc.id === id) {

                            res.render('member', {
                                title: 'Policy Member',
                                page: 'member',
                                memberData: doc
                            });
                            var dt01 = datetime.create();
                            var fomratted01 = dt01.format('d/m/Y H:M:S');
                            doc.loginLast = fomratted01;

                            db.insert(doc, function (err, doc) {
                                if (err) {
                                    console.log('Error inserting data\n' + err);
                                    return 500;
                                } else {
                                    return 200;
                                }
                            });


                        }
                    })
                })
            }
        });
    });

    app.param('id', function (req, res, next, id) {

        /* Facebook creds come in like this: id~name */

        var components = id.split('~')

        var identifier = components[0];
        var name = components[1];

        manager.findAccount(identifier, name, res, cloudant, manager.handleAccountOutcome);
    });

    app.get("/person/:id", function (req, res) {});

    //home insurance page
    app.get("/home", function (req, res) {

        var name = req.query.name;
        var id = req.query.id;
        db.list(function (err, body) {

            if (err) {
                logger.error(err);
            } else {

                var rows = body.rows;
                var count = rows.length;

                //logger.info("Number of accounts: " + count);

                var item;

                /* TODO: should be able to use a find method here */

                rows.forEach(function (account) {
                    db.get(account.id, {
                        revs_info: true
                    }, function (err, doc) {

                        console.log('The doc is: ' + doc);
                        if (doc.name === name && doc.id === id) {

                            res.render('home', {
                                title: 'Home Policy',
                                page: 'home',
                                memberData: doc
                            });
                        }
                    })
                })
            }
        });

    });

    //car insurance page
    app.get("/auto", function (req, res) {
        var name = req.query.name;
        var id = req.query.id;
        db.list(function (err, body) {

            if (err) {
                logger.error(err);
            } else {

                var rows = body.rows;
                var count = rows.length;

                //logger.info("Number of accounts: " + count);

                var item;

                /* TODO: should be able to use a find method here */

                rows.forEach(function (account) {
                    db.get(account.id, {
                        revs_info: true
                    }, function (err, doc) {

                        if (doc.name === name && doc.id === id) {

                            res.render('auto', {
                                title: 'Auto Policy',
                                page: 'auto',
                                memberData: doc
                            });
                        }
                    })
                })
            }
        })

    });

    //health page
    app.get("/health", function (req, res) {
        var name = req.query.name;
        var id = req.query.id;
        db.list(function (err, body) {

            if (err) {
                logger.error(err);
            } else {

                var rows = body.rows;
                var count = rows.length;

                //logger.info("Number of accounts: " + count);

                var item;

                /* TODO: should be able to use a find method here */

                rows.forEach(function (account) {
                    db.get(account.id, {
                        revs_info: true
                    }, function (err, doc) {

                        if (doc.name === name && doc.id === id) {

                            res.render('health', {
                                title: 'health Policy',
                                page: 'health',
                                memberData: doc
                            });
                        }
                    })
                })
            }
        });
    });

    //editUser page
    app.get("/editUser", function (req, res) {
        var name = req.query.name;
        var id = req.query.id;
        db.list(function (err, body) {
            if (err) {
                logger.error(err);
            } else {

                var rows = body.rows;
                var count = rows.length;

                //logger.info("Number of accounts: " + count);

                var item;

                /* TODO: should be able to use a find method here */
                rows.forEach(function (account) {
                    db.get(account.id, {
                        revs_info: true
                    }, function (err, doc) {

                        if (doc.name === name && doc.id === id) {
                            res.render('editUser', {
                                title: 'Edit User',
                                page: 'editUser',
                                memberData: doc
                            });
                        }
                    })
                })
            }
        });
    });

    //UPDATE User Info
    app.post("/updateuserInfo", function (req, res) {
        var Userid = req.body.userid;
        var UserPerName = req.body.fullName;

        db.list(function (err, body) {

            if (err) {
                logger.error(err);
            } else {

                var rows = body.rows;
                var count = rows.length;

                var item;
                rows.forEach(function (account) {
                    db.get(account.id, {
                        revs_info: true
                    }, function (err, doc) {
                        if (doc.id === Userid) {
                            doc.name = req.body.fullName;
                            doc.gender = req.body.gender;
                            doc.birthday = req.body.dateofbirth;
                            doc.address = req.body.address;
                            db.insert(doc, function (err, doc) {
                                if (err) {
                                    console.log('Update01 Error inserting data\n' + err);
                                    return 500;
                                } else {
                                    return 200;
                                }
                            });
                        }
                    })
                })
            }
        });
        res.redirect('/health?name=' + UserPerName + '&&id=' + Userid);
        //res.end();
    });


    //health page
    app.get("/healthClaim", function (req, res) {
        var name = req.query.name;
        var id = req.query.id;
        db.list(function (err, body) {

            if (err) {
                logger.error(err);
            } else {

                var rows = body.rows;
                var count = rows.length;

                //logger.info("Number of accounts: " + count);

                var item;

                /* TODO: should be able to use a find method here */

                rows.forEach(function (account) {
                    db.get(account.id, {
                        revs_info: true
                    }, function (err, doc) {

                        if (doc.name === name && doc.id === id) {

                            res.render('healthClaim', {
                                title: 'health Policy',
                                page: 'health',
                                memberData: doc
                            });
                        }
                    })
                })
            }
        });
    });

    //UPDATE User Info
    app.post("/processClaim", function (req, res) {
        var Userid = req.body.userid;
        var UserPerName = req.body.fullName;

        db.list(function (err, body) {

            if (err) {
                logger.error(err);
            } else {

                var rows = body.rows;
                var count = rows.length;

                var item;
                rows.forEach(function (account) {
                    db.get(account.id, {
                        revs_info: true
                    }, function (err, doc) {
                        if (doc.id === Userid) {
                            var CCategories = doc.policies[0].categories;
                            var cat_i, cov_i;
                            for(cat_i=0; cat_i<CCategories.length; cat_i++)
                            {
                              for(cov_i=0; cov_i<CCategories[cat_i].coverage.length; cov_i++)
                              {
                                if(CCategories[cat_i].coverage[cov_i].item == req.body.SlectType){
                                  if(CCategories[cat_i].coverage[cov_i].claims[0])
                                  {
                                    CCategories[cat_i].coverage[cov_i].claims[0].amount = req.body.claimamount;
                                    CCategories[cat_i].coverage[cov_i].claims[0].date = fomratted;
                                  }else {
                                    console.log('No data there for this cover type!');
                                  }
                                }
                              }
                            }

                            //doc.policies[0].categories[0].coverage[0].claims[0].amount = req.body.claimamount;
                            db.insert(doc, function (err, doc) {
                                if (err) {
                                    console.log('Error inserting data\n' + err);
                                    return 500;
                                } else {
                                    return 200;
                                }
                            });
                        }
                    })
                })
            }
        });
        res.redirect('/health?name=' + UserPerName + '&&id=' + Userid);
        //res.redirect('back');
        //res.end();
    });



    //-------------------------------------------------------------------
    // CRUD operations
    //-------------------------------------------------------------------

    //Create a doc
    function createDocument(req, res) {
        var db = cloudant.db.use(req.body.db);
        var cloudantResponse = this;
        db.insert(req.body.doc, req.body.docname, function (error, response) {
            if (!error) {
                logger.info("Response" + response.result);
                cloudantResponse.result = JSON.stringify(response);
                return cloudantResponse;
            }

        });

        res.send(cloudantResponse.result);
        res.end();
    }

    //POST call to create a document.
    app.post("/api/createdoc", createDocument);

    //Read a doc
    function readDocument(req, res) {
        var db = cloudant.db.use(req.query.db);
        var cloudantResponse = this;
        db.get(req.query.docname, {
            revs_info: true
        }, function (error, response) {
            if (!error) {
                logger.info("Response" + response.result);
                cloudantResponse.result = JSON.stringify(response);
                return cloudantResponse;
                //res.send(response.result);
            }

        });
        res.send(cloudantResponse.result);
        res.end();
    }

    //GET call to read a document.
    app.get("/api/readdoc", readDocument);

    //update a doc
    function updateDocument(req, res) {
        var db = cloudant.db.use(req.body.db);
        var cloudantResponse = this;
        db.insert(req.body.doc, req.body.docname, function (error, response) {
            if (!error) {
                logger.info("Response" + response.result);
                cloudantResponse.result = JSON.stringify(response.result);
                return cloudantResponse;
            }

        });
        res.send(cloudantResponse.result);
        res.end();
    }

    //PUT call to update a document.
    app.put("/api/updatedoc", updateDocument);

    //Delete a doc
    function deleteDocument(req, res) {
        var db = cloudant.db.use(req.query.db);
        var cloudantResponse = this;
        db.destroy(req.query.docname, req.query.rev, function (error, response) {
            if (!error) {
                logger.info("Response" + response.result);
                cloudantResponse.result = JSON.stringify(response.result);
                return cloudantResponse;
            }

        });
        res.send(cloudantResponse.result);
        res.end();
    }
    //DELETE call to delete a document.
    app.delete("/api/deletedoc", deleteDocument);


});






























health Page..
<!DOCTYPE html>
<html>
<head>
  <% include partials/template/head.ejs %>
</head>

<body class="<%= page %>">
<div class="container">
  <div class="outline">
    <% include partials/template/header.ejs %>
    <% include partials/template/headEnding.ejs %>


    <section class="layout">
      <div class="primary">
        <div id="fb-root"></div>


        <div class="welcome">

                    <div class="userInsurance">

                      <div class="ui-userInfo">
                        <div class="userTypeHeading">USER ACCOUNT</div>
                        <ul>
                            <li>Account Reference: <span><%= memberData.id %></span></li>
                            <li>Full Name: <span><%= memberData.name %></span></li>
                            <li>Date Of Birth: <span><%= memberData.birthday %></span></li>
                            <li>Gender: <span><%= memberData.gender %></span></li>
                            <li class="address">Address: <textarea disabled name="address" rows="4" cols="50" > <%= memberData.address %> </textarea></li>
                            <li class="edit_account_details"><a href="../editUser?name=<%=memberData.name%>&&id=<%=memberData.id%>">Edit User Account</a></li>
                        </ul>

                      </div>
                    </div>
                    <hr>

          <div class="healthInsurance">
            <div class="insuranceTypeHeading">Health Insurance</div>

            <div class="insuranceLeftList">
              <ul class="ui-insuranceLeftList">
                <li>Health Policy Start Date: <span><%= memberData.policies[0].createdat %></span></li>
                <li>Health Policy Renewal Date: <span><%= memberData.policies[0].policyrenewal %></span></li>
              </ul>



              <ul class="ui-insuranceLeftList">
                    <%
                    var CClaims = memberData.policies[0].categories[0].coverage[0].claims;
                    var CCoverage = memberData.policies[0].categories[0].coverage;
                    var CCategories = memberData.policies[0].categories;
                    var cat_i, cov_i, cla_i;

                    if(CCategories.length > 0)
                    {
                      for(cat_i=0; cat_i<CCategories.length; cat_i++)
                      {
                        %>
                        <div class="benefits">
                          <span><%=CCategories[cat_i].category %></span>
                        </div>

                        <%


                        for(cov_i=0; cov_i<CCategories[cat_i].coverage.length; cov_i++)
                        {
                            %>
                            <li>COVER TYPE: <span><%=CCategories[cat_i].coverage[cov_i].item %></span></li>
                            <li>COVER BEGIN: <span><%=CCategories[cat_i].coverage[cov_i].begin %></span></li>
                            <li>PERCENTAGE: <span><%=CCategories[cat_i].coverage[cov_i].percentage %></span></li>
                            <li>No. Of Claims: <span><%= CCategories[cat_i].coverage[cov_i].claims.length %></span></li>

                            <%
                              for(cla_i=0; cla_i<CCategories[cat_i].coverage[cov_i].claims.length; cla_i++)
                              {
                                  %>
                                  <li>CLAIM LIMIT (€): <span><%=CCategories[cat_i].coverage[cov_i].limit %></span></li>
                                  <li>TOTAL AMOUNT CLAIMED (€): <span><%= CCategories[cat_i].coverage[cov_i].claims[cla_i].amount %></span></li>
                                  <li>CLAIM MADE ON: <span><%= CCategories[cat_i].coverage[cov_i].claims[cla_i].date %></span></li>

                                  <%

                                  if( CCategories[cat_i].coverage[cov_i].claims[cla_i].amount  > CCategories[cat_i].coverage[cov_i].limit )
                                  {
                                    %>
                                      <span class="redC">Amount claimed is above your limit!</span><br><br><br>
                                    <%
                                  }
                              }
                              %>

                              <br>
                              <%
                        }
                      }
                    }else
                    {%>
                      <b>NO cover recored found</b>
                    <%}
                    %>
                </p>

              </ul>
            </div>




            <ul class="insuranceRightList">
              <li><a href="../healthClaim?name=<%=memberData.name%>&&id=<%=memberData.id%>">Make a claim</a></li>
            </ul>
          </div>


        </div>




      </div><!-- primary section -->

      <aside class="secondary">

      </aside><!-- secondary -->

    </section><!-- layout section -->


  </div>
</div>

<% include partials/template/footer.ejs %>
<% include partials/template/analytics.ejs %>

</body>
</html>
